/*!
  RussianNounsJS v1.2.6.SNAPSHOT

  Copyright (c) 2011-2021 Устинов Георгий Михайлович

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/
!function(e, t) {
	"function" == typeof define && define.amd ? define([], t) : "object" == typeof module && module.exports ? module.exports = t() : e.RussianNouns = t();
}("undefined" != typeof self ? self : this, function() {
	"use strict";
	const e = Object.freeze({
		NOMINATIVE: "именительный",
		GENITIVE: "родительный",
		DATIVE: "дательный",
		ACCUSATIVE: "винительный",
		INSTRUMENTAL: "творительный",
		PREPOSITIONAL: "предложный",
		LOCATIVE: "местный"
	}), t = Object.freeze({
		FEMININE: "женский",
		MASCULINE: "мужской",
		NEUTER: "средний",
		COMMON: "общий"
	}), n = Object.freeze([ e.NOMINATIVE, e.GENITIVE, e.DATIVE, e.ACCUSATIVE, e.INSTRUMENTAL, e.PREPOSITIONAL, e.LOCATIVE ]), s = e => e.split("").map(e => String.fromCharCode(e.charCodeAt(0) + 1)).join(""), r = e => e.split(",").map(s).join(","), i = {
		Case: e,
		Gender: t,
		CASES: n,
		LemmaException: class extends Error {},
		StressDictionaryException: class extends Error {},
		Lemma: class {
			constructor(e) {
				e instanceof i.Lemma ? (this.pluraleTantum = e.pluraleTantum, this.indeclinable = e.indeclinable, 
				this.animate = e.animate, this.surname = e.surname, this.name = e.name, this.transport = e.transport, 
				this.internalText = e.internalText, this.lowerCaseText = e.lowerCaseText, this.internalGender = e.internalGender) : (this.pluraleTantum = !!e.pluraleTantum || !!e.pluraliaTantum, 
				this.indeclinable = !!e.indeclinable, this.animate = !!e.animate, this.surname = !!e.surname, 
				this.name = !!e.name, this.transport = !!e.transport, this.internalText = e.text, 
				this.lowerCaseText = this.internalText.toLowerCase(), this.pluraleTantum || (this.internalGender = e.gender));
			}
			newText(e) {
				const t = new i.Lemma(this);
				return t.internalText = e(t), t.lowerCaseText = t.internalText.toLowerCase(), Object.freeze(t);
			}
			newGender(e) {
				const t = new i.Lemma(this);
				return t.internalGender = e(t), Object.freeze(t);
			}
			equals(e) {
				return e instanceof i.Lemma && this.lower() === e.lower() && this.isPluraleTantum() === e.isPluraleTantum() && (this.isPluraleTantum() || this.getGender() === e.getGender()) && this.isIndeclinable() === e.isIndeclinable() && this.isAnimate() === e.isAnimate() && this.isASurname() === e.isASurname() && this.isAName() === e.isAName() && this.isATransport() === e.isATransport();
			}
			fuzzyEquals(e) {
				return e instanceof i.Lemma && m(this.lower()) === m(e.lower()) && this.isPluraleTantum() === e.isPluraleTantum() && (this.isPluraleTantum() || this.getGender() === e.getGender()) && this.isIndeclinable() === e.isIndeclinable();
			}
			text() {
				return this.internalText;
			}
			lower() {
				return this.lowerCaseText;
			}
			isPluraleTantum() {
				return this.pluraleTantum;
			}
			isPluraliaTantum() {
				return this.pluraleTantum;
			}
			getGender() {
				return this.internalGender;
			}
			isIndeclinable() {
				return this.indeclinable;
			}
			isAnimate() {
				return this.animate || this.surname || this.name;
			}
			isASurname() {
				return this.surname;
			}
			isAName() {
				return this.name;
			}
			isATransport() {
				return this.transport;
			}
		},
		createLemma: e => {
			const t = i.createLemmaNoThrow(e);
			if (t[0]) {
				return t[0];
			}
			throw new i.LemmaException(t[1]);
		},
		createLemmaNoThrow: e => {
			let n;
			return e instanceof i.Lemma ? n = [ e, null ] : null === (n = [ null, function(e) {
				if (null == e) {
					return "No parameters specified.";
				}
				for (let t of [ "pluraleTantum", "pluraliaTantum", "indeclinable", "animate", "surname", "name", "transport" ]) {
					if ((e => null != e && "boolean" != typeof e)(e[t])) {
						return t + " must be boolean.";
					}
				}
				const n = !!e.pluraleTantum || !!e.pluraliaTantum;
				if (null == e.text) {
					return "A cyrillic word required.";
				}
				if (!n) {
					if (null == e.gender) {
						return "A grammatical gender required.";
					}
					if (!Object.values(t).includes(e.gender)) {
						return "Bad grammatical gender.";
					}
				}
				return null;
			}(e) ])[1] && (n[0] = Object.freeze(new i.Lemma(e))), Object.freeze(n);
		},
		getDeclension: e => L(i.createLemma(e)),
		getSchoolDeclension: e => {
			const t = L(i.createLemma(e));
			return 1 === t ? 2 : 2 === t ? 1 : t;
		},
		FIXED_STEM_STRESS: "SSSSSSS-SSSSSS",
		FIXED_ENDING_STRESS: "EEEEEEE-EEEEEE",
		StressDictionary: class extends class {
			constructor() {
				this.data = {};
			}
			put(e, t) {
				const n = i.createLemma(e), s = m(n.lower());
				let r = this.data[s];
				r instanceof Array || (r = [], this.data[s] = r);
				const u = r.find(e => n.equals(e[0]));
				u ? u[1] = t : r.push([ n, t ]);
			}
			putAll(e, t, n) {
				const s = n.split(",");
				for (let n of s) {
					const s = Object.assign({}, e);
					s.text = n, this.put(s, t);
				}
			}
			get(e, t) {
				const n = i.createLemma(e), s = m(n.lower()), r = this.data[s];
				if (r instanceof Array) {
					let e = r.find(e => n.equals(e[0]));
					if (!e && t && (e = r.find(e => n.fuzzyEquals(e[0]))), e) {
						return e[1];
					}
				}
			}
			remove(e) {
				const t = i.createLemma(e), n = m(t.lower()), s = this.data[n];
				s instanceof Array && (this.data[n] = s.filter(e => !t.equals(e[0])), 0 === this.data[n].length && delete this.data[n]);
			}
			find(e) {
				const t = m(e).toLowerCase(), n = this.data[t];
				return n instanceof Array ? n.map(e => e[0]) : [];
			}
		} {
			put(e, t) {
				if (!t.match(/^[SsbeE]{7}-[SsbeE]{6}$/)) {
					throw new i.StressDictionaryException("Bad settings format.");
				}
				super.put(e, t);
			}
			hasStressedEndingSingular(e, t) {
				const s = n.indexOf(t);
				if (s >= 0) {
					const t = this.get(e, !0);
					if (t) {
						const e = t.split("-")[0];
						return "E" === e[s] ? [ !0 ] : "e" === e[s] ? [ !0, !1 ] : "b" === e[s] ? [ !1, !0 ] : "s" === e[s] ? [ !1, !0 ] : [ !1 ];
					}
				}
				return [];
			}
			hasStressedEndingPlural(e, t) {
				const s = n.indexOf(t);
				if (s >= 0 && s < 6) {
					const t = this.get(e, !0);
					if (t) {
						const e = t.split("-")[1];
						return "E" === e[s] ? [ !0 ] : "e" === e[s] ? [ !0, !1 ] : "b" === e[s] ? [ !1, !0 ] : "s" === e[s] ? [ !1, !0 ] : [ !1 ];
					}
				}
				return [];
			}
		},
		Engine: class {
			constructor() {
				this.sd = function() {
					const e = new i.StressDictionary(), n = Object.freeze({
						gender: t.MASCULINE
					}), s = Object.freeze({
						gender: t.MASCULINE,
						animate: !0
					}), u = Object.freeze({
						gender: t.FEMININE
					}), a = (t, s) => e.putAll(n, t, s);
					return e.putAll(n, i.FIXED_STEM_STRESS, "брёх,дёрн,идиш,имидж,мед"), e.putAll({
						pluraleTantum: !0
					}, i.FIXED_STEM_STRESS, "ножны"), e.putAll(n, "SSSSSSS-EEEEEE", "адрес,век,вечер,город,детдом,поезд"), 
					e.putAll(n, "SSSSSSE-EEEEEE", "берег,бок,вес,лес,снег,дом,катер,счёт,мёд"), e.putAll(s, i.FIXED_STEM_STRESS, "балансёр,шофёр"), 
					e.putAll(n, "SSSSSSS-bbbbbb", "вексель,ветер"), a("SSSSSSE-ESEEEE", "глаз"), a("SSSSSSE-bEEbEE", "год"), 
					a("SSSSSSb-bbbbbb", "цех"), a("SSSSSSE-EEEEEE", "счёт"), e.putAll({
						gender: t.NEUTER
					}, "EEEEEEE-SSSSSS", "тесло,стекло,автостекло,бронестекло,оргстекло,пеностекло,смарт-стекло,спецстекло,бедро,берцо,блесна,чело,стегно,стебло"), 
					e.putAll(u, "EEEbEEE-SSESEE", "щека"), e.putAll(u, "EEEEEEE-SSESEE", "слеза"), e.putAll(n, "SbbSbbb-bbbbbb", "грош,шприц"), 
					e.putAll(n, "SssSsss-ssssss", "кишмиш,кряж,слеш,слэш"), e.putAll(s, "Sssssss-ssssss", "паныч"), 
					a("SEESeEE-EEEEEE", "стеллаж"), a("SeeSeee-eeeeee", "шиномонтаж"), e.putAll(n, "SEESEEE-EEEEEE", "багаж,грузобагаж,товаробагаж,багрец,барыш,беляш,бердыш,бич,бандаж,блиндаж,борщ,бубенец,буж,валец,варенец,венец,вираж,витраж,волосенец,волчец,вольтаж,воронец,галдёж,гамма-луч,гнилец,гараж,автогараж,голец,головач,голыш,горбач,горлач,голубец,грабёж,гуж,гуляш,дворец,делёж,дергач,долбёж,долгунец,драч,ёрш,зубец,зубрёж,изразец,калач,ключ,камыш,карандаш,картёж,кедрач,кирпич,клинец,ковш,корец,козелец,конец,кострец,копач,корж,крепёж,крестец,круглыш,кругляш,крыж,крылач,кулеш,кулич,кумач,контуш,кунтуш,купаж,кураж,кутёж,леденец,листаж,литраж,луч,метраж,меч,мираж,монтаж,муляж,мятеж,мяч,мокрец,москвич,неплатёж,нож,нутрец,образец,овсец,огурец,орлец,острец,падеж,падёж,паж,палаш,паралич,первач,пернач,песец," + r("озжгдх,фтдх,") + "пихтач,платёж,плащ,погребец,подэтаж,поставец,поташ,правёж,прыщ,путец,пыж,пугач,резец,ржанец,рубеж,рубец,рогач,свербёж,светец,сенаж,скулёж,слопец,сныч,солонец,сосец,свинец,тетраэтилсвинец,секач,спорыш,столбец,строгач,сургуч,сутаж,сыпец,сырец,сыровец,терпёж,типаж,тираж,толкач,торец,тягач,тяж,типец,тирлич,тупец,тупыш,целкач,чабрец,чепец,фураж,хвостец,хлопунец,холодец,хрящ,чертёж,чистец,шалаш,шантаж,шиш,щипец,электронож,этаж,ясенец"), 
					e.putAll(s, "SEEEEEE-EEEEEE", "алкаш,басмач,беглец,белец,бирюч,бич,близнец,бомж,богач,боец,борец,бородач,брюхач,вдовец,волосач,врач,главврач,ветврач,военврач,диетврач,санврач,глупец,глупыш,голец,головач,голыш,гонец,горбач,гордец,грач,гребец,делец,дергач,донец,дохлец,драч,ёж,ёрш,елец,жеребец,живец,жилец,жнец,жрец,избач,ингуш,истец,камыш,клещ,морж,кольчец,копач,кормач,коротыш,косач,косец,космач,крепыш,кряж,кудряш,кузнец,купец,латыш,легаш,лжец,лихач,ловец,ловкач,лохмач,малец,малыш,мертвец,мигач,мордаш,мокрец,москвич,мудрец,мураш,носач,оголец,омич,отец,праотец,паж,камер-паж,палач,пантач,певец,песец,писец,плавунец,подлец,племяш,пловец,портач,продавец,перепродавец,пошлец,пришлец,простец,птенец,пузач,пугач,рвач,рифмач,рогач,рунец,рыбец,ремнец,самец,сарыч,севец,силач,синец,скворец,скопец,скрипач,скупец,секач,слепец,слепыш,слухач,смехач,сморкач,снохач,соистец,сорванец,спец,военспец,стервец,стрелец,стригунец,стриж,стукач,сыч,стрекач,струнец,творец,телец,ткач,толмач,торгаш,трубач,трюкач,тунец,трепач,трепец,тупец,тупыш,тяглец,удалец,уж,усач,хитрец,хохмач,храбрец,хромец,хрыч," + r("фЯц,") + "циркач,червец,чернец,черныш,швец,шельмец,чтец,чиж,юнец"), 
					e.putAll({
						gender: t.NEUTER
					}, "EEEEEEE-SsESEE", "плечо"), e.put({
						text: "судья",
						gender: t.COMMON,
						animate: !0
					}, "EEEEEEE-SSSSSS"), e.putAll(u, "EEEEEEE-SESSSS", "семья,макросемья"), e.put({
						text: "свинья",
						gender: t.FEMININE,
						animate: !0
					}, "EEEEEEE-SESESS"), e.putAll(u, "EEEEEEE-eEeeee", "скамья"), e.putAll(u, i.FIXED_ENDING_STRESS, "ладья,статья,башка"), 
					e;
				}();
			}
			decline(n, s, u) {
				return function(n, i, u, l) {
					const E = function(n, s, i, u) {
						const l = s.text();
						if (s.isIndeclinable()) {
							return l;
						}
						if (s.isPluraleTantum()) {
							return U(n, s, i, l);
						}
						if (u) {
							return U(n, s, i, u);
						}
						switch (L(s)) {
						  case -1:
							return l;

						  case 0:
							return x(n, s, i);

						  case 1:
							return function n(s, i, u) {
								const l = i.text(), E = i.lower(), S = i.getGender(), p = function(e) {
									if (e.startsWith("пол") && [ "и", "ы", "а", "я", "ь" ].includes(d(e)) && o(e) >= 2) {
										let t = e.substring(3), n = t.search(/[а-яА-ЯёЁ]/);
										return n >= 0 && a.includes(t[n].toLowerCase());
									}
									return !1;
								}(E);
								if (p && A(E, [ "и", "ы" ])) {
									if ([ e.NOMINATIVE, e.ACCUSATIVE ].includes(u)) {
										return l;
									}
									{
										const t = e => [ "полминуты" ].includes(e.lower()) ? e.text() : "полу" + e.text().substring(3);
										if ("полпути" === E) {
											if ([ e.PREPOSITIONAL, e.LOCATIVE ].includes(u)) {
												return l;
											}
											{
												let e = i.newText(e => f(t(e)) + "ь");
												return x(s, e, u);
											}
										}
										if (E.endsWith("зни")) {
											let e = i.newText(e => f(t(e)) + "ь");
											return P(s, e, u);
										}
										{
											let e = i.newText(e => f(t(e)) + ("н" === d(e.lower()) ? "я" : "а"));
											return M(s, e, u);
										}
									}
								}
								let I = b(i), T = f(l);
								const N = p && E.endsWith("я") || W(E);
								p && (I = "полу" + I.substring(3), T = "полу" + T.substring(3));
								let O = I.toLowerCase();
								const L = (e, t) => {
									const n = s.sd.hasStressedEndingSingular(i, u);
									return n.length || n.push(!1), n.map(n => t(n ? m(e) : e, n));
								}, V = () => "й" === d(E) || [ "ий", "ие", "иё" ].includes(h(E, 2)), U = () => (() => A(E, [ "воробей", "муравей", "ручей", "соловей", "улей" ]))() ? f(T) + c("ь", d(T)) : T, R = () => "чщ".includes(d(O)), y = () => "ый" === h(E, 2) || A(E, [ "ной", "понятой" ]) && o(l) >= 2;
								if (e.NOMINATIVE === u) {
									return l;
								}
								if (e.GENITIVE === u) {
									const e = e => (!i.isAnimate() && "клей,чай,дом,дух,дым,дымок,газ,год,горошек,жар,жир,квас,пар,пыл,род,рост,сахар,свет,сироп,смех,снег,снежок,сок,сор,спор,срок,соус,спирт,страх,суп,сыр,табак,творог,толк,торф,туман,убыток,укроп,уксус,ход,цемент,чеснок,шаг,шик,шиповник,шоколад,шорох,шум,яд".split(",").includes(E) && ("й" === d(E) ? e.push(f(l) + c("ю", d(l))) : e = e.concat(L(I, e => e + c("у", d(e))))), 
									e);
									if (V() && i.isASurname() || y() || A(E, [ "ое", "нький", "ский", "евой", "овой" ])) {
										return I + "ого";
									}
									if (A(E, [ "ее", "кожий", "шний", "жний", "щий", "ший", "жий", "чий" ])) {
										return I + "его";
									}
									if (V()) {
										return e([ U() + "я" ]);
									}
									if (N && !R()) {
										return I + "я";
									}
									if (w(E)) {
										return C(l, i) + "ца";
									}
									if (g(E)) {
										return f(T) + "ка";
									}
									if (A(E, [ "шко" ]) && t.MASCULINE === S) {
										return T + "и";
									}
									{
										let t = [];
										return i.isASurname() || -1 === O.indexOf("ё") ? t.push(I + "а") : t = t.concat(L(I, e => e + "а")), 
										e(t);
									}
								}
								if (e.DATIVE === u) {
									return V() && i.isASurname() || y() || A(E, [ "ое", "нький", "ский", "евой", "овой" ]) ? I + "ому" : A(E, [ "ее", "кожий", "шний", "жний", "щий", "ший", "жий", "чий" ]) ? I + "ему" : V() ? U() + "ю" : N && !R() ? I + "ю" : w(E) ? C(l, i) + "цу" : g(E) ? f(T) + "ку" : i.isASurname() || -1 === O.indexOf("ё") ? I + "у" : L(I, e => e + "у");
								}
								if (e.ACCUSATIVE === u) {
									if (S === t.NEUTER) {
										return l;
									}
									return !0 === i.isAnimate() ? n(s, i, e.GENITIVE) : l;
								}
								if (e.INSTRUMENTAL === u) {
									return V() && i.isASurname() || A(E, [ "ое", "ее", "нький", "ский" ]) ? A(E, [ "вое", "лое", "мое", "ное", "рое", "тое" ]) ? I + "ым" : I + "им" : y() || A(E, [ "евой", "овой" ]) ? I + "ым" : A(E, [ "кожий", "шний", "жний", "щий", "ший", "жий", "чий" ]) ? f(T) + "им" : V() ? U() + "ем" : N || "жчшщ".includes(d(O)) ? L(I, (e, t) => t ? e + "ом" : e + "ем") : w(E) ? L(l, (e, t) => t ? C(e, i) + "цом" : C(e, i) + "цем") : E.endsWith("це") ? l + "м" : g(E) ? f(T) + "ком" : (() => i.isASurname() && (E.endsWith("ын") || E.endsWith("ин") || E.endsWith("ов") || E.endsWith("ев") || E.endsWith("ёв")))() ? l + "ым" : i.isASurname() || -1 === O.indexOf("ё") ? I + "ом" : L(I, e => e + "ом");
								}
								if (e.PREPOSITIONAL === u) {
									if (V() && i.isASurname() || y() || A(E, [ "ое", "нький", "ский", "евой", "овой" ])) {
										return I + "ом";
									}
									if (A(E, [ "ее", "кожий", "шний", "жний", "щий", "ший", "жий", "чий" ])) {
										return I + "ем";
									}
									if (A(E, [ "воробей" ])) {
										const e = f(T);
										return e + c("ье", d(e));
									}
									return A(E, [ "ий", "ие", "чье", "тье", "дье", "вье", "бье", "енье", "жалованье", "ружье", "божье", "верье", "мужье" ]) && !A(E, [ "запястье", "здоровье", "изголовье", "платье" ]) ? T + "и" : "й" === d(E) || "иё" === h(E, 2) ? U() + "е" : w(E) ? C(l, i) + "це" : g(E) ? f(T) + "ке" : i.isASurname() || -1 === O.indexOf("ё") ? I + "е" : L(I, e => e + "е");
								}
								if (e.LOCATIVE === u) {
									const t = ("ад,баз,бал,бег,берег,бережок,бой,бок,бочок,бор,борт,бред,быт,вал,век,верх,вес,ветер,ветр,вид,воз,газ,глаз,год,горб,гроб,день,долг,дух,дым,жир,зад,клей,кол,кон,корень,край,круг,лад,лёд,лед,лоб,мох,угол,лес,луг,мёд,мел,мех,мозг,мост,низ,нос,плен,плот,пол,полк,артполк,порт,аэропорт,пруд,пух,пушок,пыл,рай,род,рот,сад,свет,слух,снег,сок,спирт,стог,строй,счёт,счет,сук," + r("фти,") + "таз,тыл,хлев,ход,час,шаг,шкаф,яр").split(","), u = "вор".split(",");
									return t.includes(E) && !i.isAnimate() || u.includes(E) ? "й" === d(E) ? m(T) + "ю" : N ? m(I) + "ю" : g(E) ? m(f(T)) + "ку" : m(I) + "у" : n(s, i, e.PREPOSITIONAL);
								}
							}(n, s, i);

						  case 2:
							return M(n, s, i);

						  case 3:
							return P(n, s, i);
						}
					}(n, i, s, l);
					return E instanceof Array ? E : [ E ];
				}(this, i.createLemma(n), 0, u);
			}
			pluralize(n) {
				const s = i.createLemma(n);
				return s.isPluraleTantum() ? [ s.text() ] : function(n, s) {
					const r = [], i = s.text(), u = s.lower(), a = b(s), l = a.toLowerCase();
					if (u.endsWith("яя")) {
						return r.push(S(i, 2) + "ие"), I(r);
					}
					const O = n.sd.hasStressedEndingPlural(s, e.NOMINATIVE);
					Object.freeze(O);
					const x = t => {
						const r = n.sd.hasStressedEndingPlural(s, e.NOMINATIVE).map(e => !e);
						return r.length ? r.map(e => e ? N(l) ? t(T(a)) : t(a) : t(m(a))) : [ t(a) ];
					}, M = (e, t) => {
						const n = O.slice();
						return n.length || n.push(!1), n.map(n => t(n ? m(e) : e));
					}, P = s.getGender(), U = L(s), R = ("й" == d(u) || E(d(i))) && E(d(f(i))) ? f(i) : a, y = () => (u.endsWith("евич") || u.endsWith("евна")) && u.indexOf("ье") >= 0;
					function G() {
						const e = R, t = e.toLowerCase().indexOf("ье"), n = c("и", e[t]);
						return e.substring(0, t) + n + e.substring(t + 1);
					}
					function D(e) {
						"гжкхчшщ".includes(d(l)) || "яйь".includes(d(u)) || A(u, [ "сосед" ]) ? y() ? (r.push(G() + "и"), 
						r.push(R + "и")) : r.push(R + "и") : w(u) ? r.push(C(i, s) + "цы") : y() ? (r.push(G() + "ы"), 
						r.push(R + "ы")) : e ? r.push(R + "ы") : Array.prototype.push.apply(r, M(R, e => e + "ы"));
					}
					const j = [ [ [ t.MASCULINE, void 0 ], {
						"болгарин": [ "болгары" ],
						"господин": [ "господа" ],
						"дядя": [ "дяди", "дядья" ],
						"зуб": [ "зубы", "зубья" ],
						"клок": [ "клочья", "клоки" ],
						"князь": [ "князи", "князья" ],
						"кол": [ "колы", "колья" ],
						"месяц": [ "месяцы" ],
						"татарин": [ "татары" ],
						"хозяин": [ "хозяева" ],
						"цветок": [ "цветки", "цветы" ]
					} ], [ [ t.MASCULINE, !0 ], {
						"кондуктор": [ "кондуктора", "кондукторы" ],
						"кум": [ "кумовья" ],
						"муж": [ "мужья", "мужи" ]
					} ], [ [ t.FEMININE, void 0 ], {
						"гроздь": [ "грозди", "гроздья" ],
						"курица": [ "курицы", "куры" ],
						"стая": [ "стаи" ],
						"щека": [ "щёки" ],
						"береста": [ "берёсты" ],
						"верста": [ "вёрсты" ],
						"десна": [ "дёсны" ],
						"жена": [ "жёны" ],
						"звезда": [ "звёзды" ],
						"кинозвезда": [ "кинозвёзды" ],
						"медсестра": [ "медсёстры" ],
						"метла": [ "мётлы" ],
						"пчела": [ "пчёлы" ],
						"сестра": [ "сёстры" ],
						"слеза": [ "слёзы" ]
					} ], [ [ t.NEUTER, void 0 ], {
						"брюхо": [ "брюхи" ],
						"колено": [ "колена", "колени", "коленья" ],
						"древо": [ "древа", "древеса" ],
						"ухо": [ "уши" ],
						"око": [ "очи" ],
						"дно": [ "донья" ],
						"чудо": [ "чудеса", "чуда" ],
						"небо": [ "небеса" ],
						"бревно": [ "брёвна" ],
						"ведро": [ "вёдра" ],
						"веретено": [ "веретёна" ],
						"весло": [ "вёсла" ],
						"гнездо": [ "гнёзда" ],
						"зерно": [ "зёрна" ],
						"знамя": [ "знамёна" ],
						"колесо": [ "колёса" ],
						"облачко": [ "облачка" ],
						"озеро": [ "озёра" ],
						"ребро": [ "рёбра" ],
						"ремесло": [ "ремёсла" ],
						"седло": [ "сёдла" ],
						"село": [ "сёла" ]
					} ] ];
					for (const [e, t] of j) {
						const n = e[0], i = e[1];
						if (P === n && (null == i || i === s.isAnimate()) && t.hasOwnProperty(u)) {
							const e = t[u];
							for (let t of e) {
								r.push(t);
							}
							return I(r);
						}
					}
					const z = [ "зять", "деверь", "друг", "брат", "собрат", "лист", "стул", "брус", "обод", "полоз", "струп", "подмастерье", "якорь", "перо", "шило" ], F = "ь" === d(l) ? a : "к" === d(l) ? f(a) + "чь" : "г" === d(l) ? f(a) + "зь" : "й" === d(u) ? f(i) : A(u, [ "рь", "ль" ]) ? a : a + "ь";
					switch (U) {
					  case -1:
						r.push(i);
						break;

					  case 0:
						if ("путь" === u) {
							r.push("пути");
						} else {
							if (!u.endsWith("дитя")) {
								throw new Error("unsupported");
							}
							r.push(S(i, 3) + "ети");
						}
						break;

					  case 1:
						if (z.includes(u)) {
							r.push(F + "я");
						} else if (t.MASCULINE === P) {
							const e = [ "берег", "бок", "борт", "век", "вес", "веер", "вексель", "вечер", "глаз", "голос", "город", "доктор", "дом", "детдом", "егерь", "жемчуг", "катер", "колокол", "концлагерь", "корм", "короб", "кузов", "купол", "лес", "луг", "мастер", "номер", "рог", "сахар", "снег", "сорт", "стог", "счет", "счёт", "терем", "том", "холод", "цвет", "череп" ], t = [ "округ", "остров", "отпуск", "паспорт", "парус", "поезд", "повар", "погреб", "рукав", "цех", "юнкер" ], n = [ "адрес", "договор", "буфер", "ворох", "директор", "инспектор", "инструктор", "корпус", "крейсер", "орден", "ордер", "прожектор", "род", "свитер", "сервер", "тенор", "тон", "трактор", "тормоз", "ветер", "верх", "китель", "мех", "хлеб", "юнкер", "ястреб" ], l = [ "бункер", "вымпел", "год", "образ", "омут", "токарь", "тополь", "шторм", "штуцер" ], E = [ "лоскут", "повод", "прут", "сук", "учитель", "флигель", "штабель" ], c = [ "клин", "колос", "ком", "край" ];
							"сын" === u ? (r.push("сыновья"), D()) : "человек" === u ? (r.push("люди"), D()) : E.includes(u) ? (D(), 
							r.push(F + "я")) : c.includes(u) ? r.push(F + "я") : e.includes(u) || A(u, t) || n.includes(u) || l.includes(u) ? (l.includes(u) && D(), 
							W(u) ? Array.prototype.push.apply(r, x(e => e + "я")) : O.includes(!0) ? r.push(m(a) + "а") : r.push(a + "а"), 
							n.includes(u) && D()) : (u.endsWith("анин") || u.endsWith("янин")) && !s.isAName() || [ "барин", "боярин" ].includes(u) ? (r.push(S(i, 2) + "е"), 
							"барин" === u && r.push(S(i, 2) + "ы")) : [ "цыган" ].includes(u) ? r.push(i + "е") : "щенок" == u ? (r.push(S(i, 2) + "ки"), 
							r.push(S(i, 2) + "ята")) : !u.endsWith("ребёнок") && !u.endsWith("ребенок") || u.endsWith("жеребёнок") || u.endsWith("жеребенок") || u.endsWith("ястребёнок") || u.endsWith("ястребенок") ? (u.endsWith("ёнок") || u.endsWith("енок")) && s.isAnimate() ? r.push(S(i, 4) + "ята") : u.endsWith("ёночек") && s.isAnimate() ? r.push(S(i, 6) + "ятки") : u.endsWith("онок") && "жчш".includes(p(u, 4)) && s.isAnimate() ? r.push(S(i, 4) + "ата") : g(u) ? r.push(S(i, 2) + "ки") : u.endsWith("ый") || A(u, [ "щий", "чий", "жний", "шний", "ский" ]) ? r.push(f(i) + "е") : u.endsWith("вой") && o(S(i, 3)) >= 2 || A(u, [ "ной", "мой" ]) && i.length >= 6 ? r.push(S(i, 2) + "ые") : A(u, [ "хой", "ший", "жий" ]) ? r.push(S(i, 2) + "ие") : u.endsWith("его") ? r.push(S(i, 3) + "ие") : [ "воробей", "муравей", "ручей", "соловей", "улей", "жеребей", "ирей", "репей", "чирей" ].includes(u) ? r.push(S(i, 2) + "ьи") : D() : r.push(S(i, 7) + "дети");
						} else if (t.NEUTER === P) {
							if (A(u, [ "ко", "чо" ]) && !A(u, [ "войско", "облако" ])) {
								r.push(f(i) + "и");
							} else if (u.endsWith("имое")) {
								r.push(a + "ые");
							} else if (u.endsWith("ее")) {
								r.push(a + "ие");
							} else if (u.endsWith("ое")) {
								A(l, [ "г", "к", "ж", "ш" ]) ? r.push(a + "ие") : r.push(a + "ые");
							} else if (A(u, [ "ие", "иё" ])) {
								r.push(S(i, 2) + "ия");
							} else if (A(u, [ "ье", "ьё" ])) {
								const e = S(i, 2), t = [ "безделье", "варенье", "воскресенье", "жалованье", "запястье", "застолье", "затишье", "здоровье", "зелье", "изголовье", "новоселье", "одночасье", "печенье", "платье", "побережье", "поголовье", "подворье", "подземелье", "подполье", "поместье", "предплечье", "раздумье", "сиденье", "средневековье", "увечье", "угодье", "устье" ].includes(u);
								"е" !== d(u) || t || r.push(e + "ия"), r.push(e + "ья");
							} else {
								A(u, [ "дерево", "звено", "крыло" ]) ? r.push(a + "ья") : A(u, [ "ле", "ре" ]) ? r.push(a + "я") : u.endsWith("судно") && s.isATransport() ? r.push(S(i, 2) + "а") : (Array.prototype.push.apply(r, x(e => e + "а")), 
								A(u, [ "щупальце" ]) && D());
							}
						} else {
							r.push(a + "и");
						}
						break;

					  case 2:
						"заря" === u ? r.push("зори") : u.endsWith("ая") && !u.endsWith("свая") ? "жш".includes(d(l)) || A(l, [ "ск", "цк" ]) ? r.push(a + "ие") : r.push(a + "ые") : D();
						break;

					  case 3:
						"мя" === h(u, 2) ? r.push(a + "ена") : Object.keys(V).includes(u) ? r.push(f(V[u]) + "и") : t.FEMININE === P ? r.push(R + "и") : "и" === d(R) ? r.push(R + "я") : r.push(R + "а");
					}
					return I(r);
				}(this, s);
			}
		}
	}, u = "бвгджзклмнпрстфхцчшщ", a = u + "й", l = "аоуэыяёюеи", E = e => l.includes(e.toLowerCase()), c = (e, t) => (e => e === e.toUpperCase())(t) ? e.toUpperCase() : e, o = e => e.split("").filter(E).length, d = e => e && e.length ? e[e.length - 1] : "", h = (e, t) => e.substring(e.length - t), f = e => e.substring(0, e.length - 1), S = (e, t) => e.substring(0, e.length - t), p = (e, t) => d(S(e, t)), A = (e, t) => t.filter(t => e.endsWith(t)).length > 0, I = e => e.filter((t, n) => e.indexOf(t) === n), m = e => e.replace("ё", "е").replace("Ё", "Е"), T = e => {
		const t = Math.max(e.toLowerCase().lastIndexOf("е"), e.toLowerCase().lastIndexOf("ё")), n = c("ё", e[t]);
		return e.substring(0, t) + n + e.substring(t + 1);
	}, N = e => 1 === e.replace(/[^её]/g, "").length;
	function O(e) {
		const t = d(e).toLowerCase();
		return ("й" === t || E(t)) && E(d(f(e))) ? S(e, 2) : E(t) ? f(e) : e;
	}
	function b(e) {
		const n = e.text(), s = e.lower(), r = e.getGender(), i = d(s);
		if ([ "бубен", "бугор", "ветер", "вошь", "вымысел", "горшок", "дятел", "домысел", "замысел", "кашель", "коготь", "лапоть", "лоб", "локоть", "ломоть", "молебен", "мох", "ноготь", "овен", "пепел", "пес", "пёс", "петушок", "помысел", "порошок", "промысел", "псалом", "пушок", "ров", "рожь", "рот", "сон", "стебель", "стишок", "угол", "умысел", "хребет", "церковь", "шов" ].includes(s) || A(s, [ "узел", "уголь", "чок", "ешок", "хол" ]) || e.isAnimate() && A(s, [ "посол" ])) {
			const e = "ь" === i ? f(n) : n;
			return S(e, 2) + d(e);
		}
		if ([ "лёд", "лед" ].includes(s) || "лев" === s && e.isAnimate()) {
			return S(n, 2) + c("ь", d(f(n))) + d(n);
		}
		if (s.endsWith("рёк") && o(n) >= 2) {
			return S(n, 2) + "ьк";
		}
		if (s.endsWith("ёк") && E(p(n, 2))) {
			return S(n, 2) + "йк";
		}
		if (u.includes(d(s))) {
			return n;
		}
		if ("ь" === d(s)) {
			const e = [ "ясень", "бюллетень", "олень", "тюлень", "гордень", "пельмень", "ячмень" ];
			return s.endsWith("ень") && r === t.MASCULINE && !A(s, e) ? S(n, 3) + "н" : f(n);
		}
		return "ь" === d(f(s)) ? f(n) : "о" === d(s) && "влмнстх".includes(d(f(s))) ? f(n) : O(n);
	}
	function L(e) {
		const n = e.lower(), s = e.getGender();
		if (e.isPluraleTantum()) {
			return;
		}
		if (e.isIndeclinable()) {
			return -1;
		}
		const r = d(n);
		switch (s) {
		  case t.FEMININE:
			return "а" == r || "я" == r ? 2 : a.includes(r) ? -1 : 3;

		  case t.MASCULINE:
			return "а" == r || "я" == r ? 2 : "путь" == n ? 0 : 1;

		  case t.NEUTER:
			return [ "дитя", "полудитя" ].includes(n) ? 0 : "мя" == h(n, 2) ? 3 : 1;

		  case t.COMMON:
			return "а" === r || "я" === r ? 2 : "и" === r ? -1 : 1;

		  default:
			throw new Error("incorrect gender");
		}
	}
	const w = e => "ц" === d(e);
	function C(e, t) {
		const n = f(e), s = f(t.lower());
		if ("а" === d(s)) {
			return n;
		}
		if (A(s, [ "зне", "жне", "гре", "спе", "мудре" ]) || h(f(s), 3).split("").every(e => u.includes(e)) || t.isAName()) {
			return n;
		}
		if ("ле" === h(s, 2)) {
			const e = p(s, 2);
			return E(e) || "л" === e ? f(n) + "ь" : n;
		}
		return E(d(s)) && "и" !== d(s) ? E(d(f(s))) ? S(e, 2) + "й" : A(t.lower(), [ "месяц" ]) ? n : S(e, 2) : n;
	}
	function g(e) {
		return A(e, [ "чек", "шек" ]) && e.length >= 6 || A(e, [ "лапоток", "желток" ]) || e.endsWith("ок") && !e.endsWith("шок") && ![ "инок", "исток", "обморок", "порок", "пророк", "сток", "урок" ].includes(e) && !A(e, [ "поток", "приток", "переток", "проток", "биоток", "электроток", "восток", "водосток", "водоток", "воток", "знаток" ]) && !E(p(e, 2)) && (E(p(e, 3)) || A(S(e, 2), [ "ст", "рт" ])) && e.length >= 4;
	}
	const W = e => "ь" === d(e) && !e.endsWith("господь") || "её".includes(d(e)) && !A(e, [ "це", "же" ]);
	function x(t, n, s) {
		const r = n.text(), i = n.lower();
		if (i.endsWith("путь")) {
			return s === e.INSTRUMENTAL ? f(r) + "ём" : P(t, n, s);
		}
		if (!i.endsWith("дитя")) {
			throw new Error("unsupported");
		}
		switch (s) {
		  case e.NOMINATIVE:
		  case e.ACCUSATIVE:
			return r;

		  case e.GENITIVE:
		  case e.DATIVE:
		  case e.PREPOSITIONAL:
		  case e.LOCATIVE:
			return r + "ти";

		  case e.INSTRUMENTAL:
			return [ r + "тей", r + "тею" ];
		}
	}
	function M(t, n, s) {
		const r = n.text(), i = n.lower(), u = b(n), a = u.toLowerCase(), l = f(r), c = f(i), S = () => "я" === d(i), p = () => i.endsWith("ая") && !(2 === o(r) || E(d(u))), I = () => i.endsWith("яя") && !(2 === o(r) || E(d(u))), m = [ "жая", "шая" ];
		switch (s) {
		  case e.NOMINATIVE:
			return r;

		  case e.GENITIVE:
			return I() || A(i, m) ? u + "ей" : p() ? u + "ой" : n.isASurname() ? l + "ой" : i.endsWith("ничья") ? l + "ей" : S() || "гжкхчшщ".includes(d(a)) ? l + "и" : l + "ы";

		  case e.DATIVE:
			return I() || A(i, m) ? u + "ей" : p() ? u + "ой" : n.isASurname() ? l + "ой" : "ия" === h(i, 2) ? l + "и" : i.endsWith("ничья") ? l + "ей" : l + "е";

		  case e.ACCUSATIVE:
			return p() ? u + "ую" : I() ? u + "юю" : S() ? l + "ю" : l + "у";

		  case e.INSTRUMENTAL:
			return I() || A(i, m) ? u + "ею" : p() ? u + "ой" : S() || "жцчшщ".includes(d(a)) ? "и" === d(c) ? l + "ей" : [ l + "ей", l + "ею" ] : [ l + "ой", l + "ою" ];

		  case e.PREPOSITIONAL:
			return I() || A(i, m) ? u + "ей" : p() ? u + "ой" : n.isASurname() ? l + "ой" : "ия" === h(i, 2) ? l + "и" : i.endsWith("ничья") ? l + "ей" : l + "е";

		  case e.LOCATIVE:
			return M(t, n, e.PREPOSITIONAL);
		}
	}
	const V = {
		"дочь": "дочерь",
		"мать": "матерь"
	};
	function P(t, n, s) {
		const r = n.text(), i = n.lower();
		if (![ e.NOMINATIVE, e.ACCUSATIVE ].includes(s) && Object.keys(V).includes(i)) {
			return P(t, n.newText(() => V[i]), s);
		}
		const u = b(n);
		if ("мя" === h(i, 2)) {
			switch (s) {
			  case e.NOMINATIVE:
				return r;

			  case e.GENITIVE:
			  case e.DATIVE:
				return u + "ени";

			  case e.ACCUSATIVE:
				return r;

			  case e.INSTRUMENTAL:
				return u + "енем";

			  case e.PREPOSITIONAL:
				return u + "ени";

			  case e.LOCATIVE:
				return P(t, n, e.PREPOSITIONAL);
			}
		} else {
			switch (s) {
			  case e.NOMINATIVE:
				return r;

			  case e.GENITIVE:
			  case e.DATIVE:
				return u + "и";

			  case e.ACCUSATIVE:
				return r;

			  case e.INSTRUMENTAL:
				return A(i, [ "вошь", "рожь", "церковь" ]) ? r + "ю" : u + "ью";

			  case e.PREPOSITIONAL:
				return u + "и";

			  case e.LOCATIVE:
				return P(t, n, e.PREPOSITIONAL);
			}
		}
	}
	function U(n, r, i, a) {
		const o = a.toLowerCase(), h = r.getGender(), I = o.endsWith("цы") ? f(a) : O(a), T = [ "ли", "си", "би", "ви", "ди", "ти", "пи", "ри", "ни", "фи", "зи", "ьи", "ья", "ия", "ря", "ля", "ая" ];
		for (let e of l) {
			T.push(e + "и");
		}
		const N = () => o.endsWith("ые"), b = () => o.endsWith("ие"), w = e => n.sd.hasStressedEndingPlural(r, i).includes(!0) ? m(e) : e, C = [ "головы", "громадины", "детины", "деревенщины", "дохлятины", "дубины", "ехидины", "жадины", "зверины", "идиотины", "кислятины", "молодчины", "орясины", "остолопины", "сиротины", "скотины", "старейшины", "старины", "старшины", "уродины" ], g = () => (() => A(o, [ "овы", "евы", "ёвы", "ины", "ыны" ]) && !A(o, C) && (r.isASurname() || h === t.COMMON))() || o.endsWith("ничьи");
		if (e.DATIVE === i) {
			return g() ? a + "м" : N() ? S(a, 2) + "ым" : b() ? S(a, 2) + "им" : A(o, T) ? f(a) + "ям" : w(I) + "ам";
		}
		if (e.INSTRUMENTAL === i) {
			return g() ? a + "ми" : N() ? S(a, 2) + "ыми" : b() ? S(a, 2) + "ими" : A(o, [ "дети", "люди" ]) && !A(o, [ "нелюди" ]) ? f(a) + "ьми" : A(o, T) ? f(a) + "ями" : w(I) + "ами";
		}
		if ([ e.PREPOSITIONAL, e.LOCATIVE ].includes(i)) {
			return g() ? a + "х" : N() ? S(a, 2) + "ых" : b() ? S(a, 2) + "их" : A(o, T) ? f(a) + "ях" : w(I) + "ах";
		}
		if ([ e.GENITIVE, e.ACCUSATIVE ].includes(i)) {
			if (A(o, [ "овичи", "евичи" ])) {
				return f(a) + "ей";
			}
			if (o.endsWith("вны") && "овны" !== o) {
				return S(a, 2) + "ен";
			}
		}
		if (e.GENITIVE === i || e.ACCUSATIVE === i && r.isAnimate()) {
			if (g()) {
				return a + "х";
			}
			if (N()) {
				return S(a, 2) + "ых";
			}
			if (b()) {
				return S(a, 2) + "их";
			}
			const e = L(r), l = () => {
				const e = I.toLowerCase(), t = [ "жки", "шки", "чки", "ножны" ];
				if (A(e, [ "кн", "кл", "дк", "нк", "пк", "рк", "тк", "вк", "лк", "мк" ]) && !A(o, [ "сумерки" ]) || "зл" === e || A(o, t) && n.sd.hasStressedEndingPlural(r, i).includes(!0)) {
					const e = d(I);
					return f(I) + c("о", e) + e;
				}
				if (A(o, [ "вна", "вца", "вцы", "пла", "дца", "дра", "судна", "рки", "рцы", "тлы", "рна", "тна", "енца", "десны", "дёсны", "рёбра", "ребра", "сосны" ]) && !A(o, [ "недра" ]) || A(o, t)) {
					const e = p(a, 1);
					return S(a, 2) + c("е", e) + e;
				}
				if (A(o, [ "сестры", "сёстры", "серьги" ])) {
					const e = p(a, 1);
					return ("ь" === p(o, 2) ? m(S(a, 3)) : m(S(a, 2))) + c("ё", e) + e;
				}
				if (A(e, [ "льц", "сьм", "деньг", "ьк", "йк", "дьб" ])) {
					const e = d(I);
					return S(I, 2) + c("е", e) + e;
				}
				return A(o, [ "сла", "слы" ]) ? f(I) + "ел" : I;
			};
			if ([ 3, 0 ].includes(e)) {
				if (o.endsWith("и")) {
					return f(a) + "ей";
				}
				if ([ "гроздья" ].includes(o)) {
					return f(a) + "ев";
				}
			}
			const O = p(o, 2), w = [ "беготни", "болтовни", "будни", "вожжи", "возни", "доли", "лапши", "левши", "люди", "марли", "моря", "мощи", "ноздри", "пени", "пятерни", "распри", "родни", "сакли", "сани", "сени", "ступни", "судьи", "фигни", "чукчи" ];
			if (t.FEMININE !== h) {
				const e = [ "адреса", "паспорта", "поезда", "цеха", "снега", "бункера", "буфера", "берега", "вымпела", "голоса", "города", "директора", "договора", "доктора", "жемчуга", "инспектора", "инструктора", "колокола", "кондуктора", "короба", "корпуса", "крейсера", "кузова", "леса", "мастера", "номера", "облачка", "острова", "отпуска", "паруса", "повара", "погреба", "прожектора", "рукава", "сахара", "свитера", "сервера", "трактора", "тормоза", "холода", "цвета", "черепа", "шторма", "штуцера", "юнкера", "ястреба", "суда", "корм" ], n = e.concat([ "аланы", "бега", "беглецы", "близнецы", "бойцы", "бока", "борта", "борцы", "бруствера", "брюшки", "веера", "века", "венцы", "верха", "веса", "весы", "вечера", "вороха", "глупцы", "года", "гонцы", "дворцы", "дельцы", "детдома", "детдомы", "дома", "жеребцы", "жильцы", "жрецы", "зубцы", "истцы", "катера", "концы", "корма", "кузнецы", "купола", "купцы", "луга", "мертвецы", "меха", "мудрецы", "облака", "образа", "образцы", "огурцы", "округа", "омута", "ордена", "ордера", "отцы", "очки", "певцы", "песцы", "пловцы", "подлецы", "продавцы", "птенцы", "резцы", "рога", "рода", "рубцы", "самцы", "свинцы", "сорта", "соуса", "спецы", "стога", "столбцы", "стрельцы", "творцы", "тельцы", "тенора", "терема", "тома", "тона", "торцы", "хлеба", "юнцы" ]), i = [ "аршины", "баклажаны", "буквы", "гольфы", "граммы", "гусары", "дела", "кадеты", "килограммы", "омы", "помидоры", "рентгены", "ботинки", "человеки", "чулки", "шорты" ], u = [ "гектары", "рельсы" ], I = C.concat([ "бедняги", "бедолаги", "болгары", "бродяги", "брызги", "брюки", "брюхи", "будды", "бусы", "валенки", "веки", "вельможи", "верзилы", "вилы", "владыки", "воеводы", "волосы", "вояки", "главы", "грузины", "задворки", "задиры", "железы", "жилы", "зануды", "зеваки", "именины", "калеки", "кальсоны", "каникулы", "колготки", "коллеги", "крохи", "курицы", "куры", "ладоши", "ламы", "макароны", "мужчины", "нападки", "нары", "непоседы", "носилки", "ножны", "папы", "папаши", "таты", "падлы", "партизаны", "погоны", "поминки", "посиделки", "похороны", "предтечи", "работяги", "разы", "ребятки", "румыны", "самоубийцы", "санки", "убийцы", "сапоги", "сатаны", "сироты", "сливки", "слуги", "солдаты", "старосты", "сумерки", "сутки", "татары", "телеса", "хитрюги", "четвереньки", "шляпы", "шмотки", "яблоки", "дядьки", "дяденьки", "зайки", "кроссовки", "малютки", "малолетки", "попки", "турки", "узы", "хлопоты", "шахматы" ]), m = [ "братишки", "дружки", "мальчишки", "парнишки", "сынишки", "папочки", "дедушки", "дядюшки", "батюшки", "городишки", "домишки" ];
				if (h === t.COMMON && !A(o, w) && ![ "ж", "ш", "ч" ].includes(O) || I.includes(o) || "барин" === r.lower()) {
					return l();
				}
				if (n.includes(o)) {
					return f(a) + "ов";
				}
				if (i.includes(o)) {
					return [ l(), f(a) + "ов" ];
				}
				if (u.includes(o)) {
					return [ f(a) + "ов", l() ];
				}
				if (A(o, [ "жи", "ши", "чи", "ля", "ли", "чи", "ри", "ти", "ди", "борщи", "клещи", "товарищи", "плащи", "прыщи", "хрящи" ]) || w.includes(o) || r.lower().endsWith("ь") && !A(r.lower(), [ "зять", "деверь" ]) || "щи" === o) {
					return ("ь" === d(f(o)) ? S(a, 2) : f(a)) + "ей";
				}
				if (A(o, [ "братья", "брусья", "деревья", "донья", "звенья", "клинья", "клочья", "коленья", "колосья", "колья", "комья", "крылья", "листья", "лоскутья", "лохмотья", "перья", "платья", "поводья", "прутья", "стулья", "сучья", "ульи", "хлопья", "шилья" ])) {
					return f(a) + "ев";
				}
				if (A(o, [ "зятья", "кумовья", "деверья", "края", "клеи", "холуи" ]) || [ s("фтз"), "чаи" ].includes(o)) {
					return f(a) + "ёв";
				}
				if (A(o, [ "мессии" ])) {
					return f(a) + "й";
				}
				if (A(o, [ "ья", "ия" ])) {
					return t.MASCULINE === h ? S(a, 2) + "ей" : S(a, 2) + "ий";
				}
				if (A(o, [ "семена", "стремена" ])) {
					return S(a, 3) + "ян";
				}
				if (o.endsWith("мена")) {
					return S(a, 3) + "ён";
				}
				if (r.lower().endsWith("яйцо")) {
					return c("яиц", f(a));
				}
				if (o.endsWith("нца")) {
					return [ l(), f(a) + "ев" ];
				}
				if (A(o, [ "а", "не", "ищи" ]) && !A(o, e)) {
					return l();
				}
				if (A(o, [ "ницы", "лицы", "пицы", "бицы" ])) {
					return f(a);
				}
				if (o.endsWith("цы") || o.endsWith("и") && E(p(o, 1))) {
					return f(a) + "ев";
				}
				if (A(o, [ "жки", "шки", "чки" ]) && (t.MASCULINE !== h || A(o, m)) && !r.lower().endsWith("ок")) {
					return l();
				}
				if (o.endsWith("ьи")) {
					return t.MASCULINE === h ? f(a) + "ёв" : S(a, 2) + "ей";
				}
				if (A(o, [ "ы", "и", "а" ])) {
					return f(a) + "ов";
				}
			}
			if (o.endsWith("йки")) {
				return S(a, 3) + "ек";
			}
			if (o.endsWith("ки")) {
				if ("ь" === O) {
					const e = d(f(a));
					return S(a, 3) + c("е", e) + e;
				}
				if ([ "ж", "ш", "ч" ].includes(O)) {
					return l();
				}
				if (u.includes(O)) {
					return S(a, 2) + "ок";
				}
			}
			if (w.includes(o)) {
				return f(a) + "ей";
			}
			if (A(o, [ "аи", "ои", "еи", "эи", "уи" ])) {
				return f(a) + "й";
			}
			if ("свечи" === o) {
				return [ f(a), f(a) + "ей" ];
			}
			if ("пригоршни" === o) {
				return [ f(a) + "ей", S(a, 2) + "ен" ];
			}
			if ("тихони" === o) {
				return [ S(a, 2) + "нь", f(a) + "ей" ];
			}
			if (A(o, [ "ьи", "ии" ])) {
				return n.sd.hasStressedEndingSingular(r, i).includes(!0) ? S(a, 2) + "ей" : S(a, 2) + "ий";
			}
			if (o.endsWith("ни") && u.includes(p(o, 2))) {
				return [ "барышни", "боярышни", "деревни" ].includes(o) ? S(a, 2) + "ень" : o.endsWith("кухни") ? S(a, 2) + "онь" : S(a, 2) + "ен";
			}
			if (I.toLowerCase().endsWith("ийк")) {
				return S(I, 2) + "ек";
			}
			if (I.length === o.length - 1 && A(o, T)) {
				if ([ "ь", "й" ].includes(p(I, 1).toLowerCase()) && !r.isAnimate()) {
					const e = d(I);
					return S(I, 2) + c("е", e) + e;
				}
				return A(o, [ "земли", "петли" ]) ? f(I) + "ель" : I + "ь";
			}
			return l();
		}
		return a;
	}
	return Object.freeze(i);
});